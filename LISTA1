#EXERCICIOS VETOR IF

-----------------------------------------------------------------------------------
1 EXERCICIO 
#include <stdio.h>

// Função para calcular a soma dos elementos do vetor
int calcularSomaVetor(int vetor[], int tamanho) {
    int soma = 0;
    for (int i = 0; i < tamanho; i++) {
        soma += vetor[i];
    }
    return soma;
}

int main() {
    int N;
    int vetor[100];

    // Leitura do tamanho N do vetor
    printf("Digite o tamanho do vetor (até 100): ");
    scanf("%d", &N);

    // Verificação do limite do vetor
    if (N <= 0 || N > 100) {
        printf("Tamanho do vetor inválido. Deve estar entre 1 e 100.\n");
        return 1;
    }

    // Leitura ou geração dos elementos do vetor
    printf("Digite %d elementos inteiros:\n", N);
    for (int i = 0; i < N; i++) {
        scanf("%d", &vetor[i]);
    }

    // Chamada da função para calcular a soma dos elementos do vetor
    int soma = calcularSomaVetor(vetor, N);

    // Exibição do resultado
    printf("A soma dos elementos do vetor é: %d\n", soma);

    return 0;
}

------------------------------------------------------------------------------------------------
2 EXERCICIO

#include <stdio.h>

// Função para encontrar o menor elemento do vetor
float encontrarMenor(float vetor[], int tamanho) {
    float menor = vetor[0];
    for (int i = 1; i < tamanho; i++) {
        if (vetor[i] < menor) {
            menor = vetor[i];
        }
    }
    return menor;
}

int main() {
    int n;
    printf("Digite o tamanho do vetor: ");
    scanf("%d", &n);

    if (n <= 0) {
        printf("Tamanho inválido do vetor.\n");
        return 1;
    }

    float vetor[n];
    printf("Digite os %d elementos do vetor:\n", n);
    for (int i = 0; i < n; i++) {
        scanf("%f", &vetor[i]);
    }

    printf("Vetor informado: ");
    for (int i = 0; i < n; i++) {
        printf("%.2f ", vetor[i]);
    }

    float menorElemento = encontrarMenor(vetor, n);
    printf("\nO menor elemento do vetor é: %.2f\n", menorElemento);

    return 0;
}
--------------------------------------------------------------------------------------------------
3 exercicio
#include <stdio.h>

// Função para encontrar o maior elemento do vetor
float encontrarMaior(float vetor[], int tamanho) {
    float maior = vetor[0];
    for (int i = 1; i < tamanho; i++) {
        if (vetor[i] > maior) {
            maior = vetor[i];
        }
    }
    return maior;
}

int main() {
    int n;
    printf("Digite o tamanho do vetor: ");
    scanf("%d", &n);

    if (n <= 0) {
        printf("Tamanho inválido do vetor.\n");
        return 1;
    }

    float vetor[n];
    printf("Digite os %d elementos do vetor:\n", n);
    for (int i = 0; i < n; i++) {
        scanf("%f", &vetor[i]);
    }

    printf("Vetor informado: ");
    for (int i = 0; i < n; i++) {
        printf("%.2f ", vetor[i]);
    }

    float maiorElemento = encontrarMaior(vetor, n);
    printf("\nO maior elemento do vetor é: %.2f\n", maiorElemento);

    return 0;
}
------------------------------------------------------------------------------------------------
4 exercicio
#include <stdio.h>

// Função para contar quantos valores ímpares existem no vetor
int contarImpares(int vetor[], int tamanho) {
    int contador = 0;
    for (int i = 0; i < tamanho; i++) {
        if (vetor[i] % 2 != 0) {
            contador++;
        }
    }
    return contador;
}

int main() {
    int n;
    printf("Digite o tamanho do vetor: ");
    scanf("%d", &n);

    if (n <= 0) {
        printf("Tamanho inválido do vetor.\n");
        return 1;
    }

    int vetor[n];
    printf("Digite os %d elementos do vetor:\n", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &vetor[i]);
    }

    printf("Vetor informado: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", vetor[i]);
    }

    int qtdImpares = contarImpares(vetor, n);
    printf("\nA quantidade de valores ímpares no vetor é: %d\n", qtdImpares);

    return 0;
}
------------------------------------------------------------------------------------------
5 exercicio

#include <stdio.h>

// Função para contar quantas vezes um valor aparece no vetor
int contarOcorrencias(int vetor[], int tamanho, int valor) {
    int contador = 0;
    for (int i = 0; i < tamanho; i++) {
        if (vetor[i] == valor) {
            contador++;
        }
    }
    return contador;
}

int main() {
    int n;
    printf("Digite o tamanho do vetor: ");
    scanf("%d", &n);

    if (n <= 0) {
        printf("Tamanho inválido do vetor.\n");
        return 1;
    }

    int vetor[n];
    printf("Digite os %d elementos do vetor:\n", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &vetor[i]);
    }

    printf("Digite o valor que deseja verificar no vetor: ");
    int valor;
    scanf("%d", &valor);

    printf("Vetor informado: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", vetor[i]);
    }

    int ocorrencias = contarOcorrencias(vetor, n, valor);
    printf("\nO valor %d aparece %d vez(es) no vetor.\n", valor, ocorrencias);

    return 0;
}
-----------------------------------------------------------------------------------------------
6 exercicio

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Função para verificar se o número está presente no vetor e, se estiver, retorna a posição
int verificarNumero(int vetor[], int tamanho, int numero) {
    for (int i = 0; i < tamanho; i++) {
        if (vetor[i] == numero) {
            return i;
        }
    }
    return -1; // Retorna -1 se o número não estiver presente no vetor
}

int main() {
    int n;
    printf("Digite o tamanho do vetor: ");
    scanf("%d", &n);

    if (n <= 0) {
        printf("Tamanho inválido do vetor.\n");
        return 1;
    }

    int vetor[n];

    // Inicializa o gerador de números aleatórios com o tempo atual
    srand(time(NULL));

    printf("Vetor gerado aleatoriamente: ");
    for (int i = 0; i < n; i++) {
        vetor[i] = rand() % 100; // Gera um número aleatório entre 0 e 99
        printf("%d ", vetor[i]);
    }

    printf("\nDigite um número para verificar se está no vetor: ");
    int numero;
    scanf("%d", &numero);

    int posicao = verificarNumero(vetor, n, numero);
    if (posicao != -1) {
        printf("O número %d está no vetor na posição %d.\n", numero, posicao);
    } else {
        printf("O número %d não está no vetor.\n", numero);
    }

    return 0;
}
------------------------------------------------------------------------------------------------------------
7 exercicio

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Função para multiplicar os elementos de mesmo índice dos vetores
void multiplicarVetores(int vetor1[], int vetor2[], int resultado[], int tamanho) {
    for (int i = 0; i < tamanho; i++) {
        resultado[i] = vetor1[i] * vetor2[i];
    }
}

int main() {
    int n;
    printf("Digite o tamanho dos vetores: ");
    scanf("%d", &n);

    if (n <= 0) {
        printf("Tamanho inválido dos vetores.\n");
        return 1;
    }

    int vetor1[n], vetor2[n], resultado[n];

    // Opção para gerar vetores aleatórios
    srand(time(NULL));
    printf("Vetor 1 gerado aleatoriamente: ");
    for (int i = 0; i < n; i++) {
        vetor1[i] = rand() % 10; // Gera um número aleatório entre 0 e 9
        printf("%d ", vetor1[i]);
    }
    printf("\n");

    printf("Vetor 2 gerado aleatoriamente: ");
    for (int i = 0; i < n; i++) {
        vetor2[i] = rand() % 10; // Gera um número aleatório entre 0 e 9
        printf("%d ", vetor2[i]);
    }
    printf("\n");

    // Multiplica os elementos de mesmo índice e coloca o resultado no vetor "resultado"
    multiplicarVetores(vetor1, vetor2, resultado, n);

    printf("Vetor resultado da multiplicação: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", resultado[i]);
    }
    printf("\n");

    return 0;
}
--------------------------------------------------------------------------------------------------------------
8 exercicio

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int main() {
    int n;
    printf("Digite o número de lançamentos do dado: ");
    scanf("%d", &n);

    if (n <= 0) {
        printf("Número inválido de lançamentos.\n");
        return 1;
    }

    int resultados[n];

    // Inicializa o gerador de números aleatórios com o tempo atual
    srand(time(NULL));

    printf("Resultados dos lançamentos do dado: ");
    for (int i = 0; i < n; i++) {
        resultados[i] = rand() % 6 + 1; // Gera um número aleatório entre 1 e 6 (representando as faces do dado)
        printf("%d ", resultados[i]);
    }
    printf("\n");

    int ocorrencias[6] = {0}; // Inicializa o vetor de ocorrências com zeros

    for (int i = 0; i < n; i++) {
        ocorrencias[resultados[i] - 1]++; // Incrementa a ocorrência da face correspondente no vetor de ocorrências
    }

    printf("Número de ocorrências de cada face:\n");
    for (int i = 0; i < 6; i++) {
        printf("Face %d: %d vezes\n", i + 1, ocorrencias[i]);
    }

    return 0;
}
-----------------------------------------------------------------------------------------------------------
9 exercicio
#include <stdio.h>
#include <string.h>

int main() {
    char vetor[101]; // Vetor para armazenar a string (100 caracteres + o caractere nulo '\0')

    printf("Digite uma string (limite de 100 caracteres): ");
    fgets(vetor, sizeof(vetor), stdin);

    // Remover o caractere de quebra de linha '\n' gerado pelo fgets
    int tamanho = strlen(vetor);
    if (vetor[tamanho - 1] == '\n') {
        vetor[tamanho - 1] = '\0';
    }

    printf("Vetor lido em ordem inversa: ");
    for (int i = strlen(vetor) - 1; i >= 0; i--) {
        printf("%c", vetor[i]);
    }
    printf("\n");

    return 0;
}
--------------------------------------------------------------------------------------------
10 exercicio
#include <stdio.h>

int main() {
    // Tamanho máximo do vetor DNA
    int tamanho = 50;
    
    // Vetor DNA e seu complementar
    char dna[tamanho + 1]; // +1 para o caractere nulo '\0' no final da string
    char complementar[tamanho + 1];
    
    // Lendo o vetor DNA
    printf("Digite o vetor DNA (A, T, C ou G) de no máximo 50 bases: ");
    scanf("%s", dna);
    
    // Gerando o vetor complementar
    for (int i = 0; dna[i] != '\0'; i++) {
        switch (dna[i]) {
            case 'A':
                complementar[i] = 'T';
                break;
            case 'T':
                complementar[i] = 'A';
                break;
            case 'C':
                complementar[i] = 'G';
                break;
            case 'G':
                complementar[i] = 'C';
                break;
            default:
                complementar[i] = 'X'; // Caractere inválido caso haja um erro
        }
    }
    complementar[tamanho] = '\0'; // Adicionando o caractere nulo no final do vetor complementar
    
    // Imprimindo o vetor complementar
    printf("Vetor complementar: %s\n", complementar);
    
    return 0;
}
----------------------------------------------------------------------------------------------------------------
11 execicio
#include <stdio.h>

// Função para ordenar o vetor de notas em ordem crescente
void ordenarNotas(float notas[]) {
    for (int i = 0; i < 4; i++) {
        for (int j = i + 1; j < 5; j++) {
            if (notas[i] > notas[j]) {
                float temp = notas[i];
                notas[i] = notas[j];
                notas[j] = temp;
            }
        }
    }
}

// Função para calcular a nota final do quesito
float calcularNotaFinal(float notas[]) {
    // Ordena as notas em ordem crescente
    ordenarNotas(notas);
    
    // Calcula a soma das três notas centrais (índices 1, 2 e 3)
    float somaNotas = notas[1] + notas[2] + notas[3];
    
    // Calcula a média dessas três notas
    float notaFinal = somaNotas / 3.0;
    
    return notaFinal;
}

int main() {
    // Vetor para armazenar as notas
    float notas[5];
    
    // Lendo as notas da agremiação
    printf("Digite as cinco notas recebidas pela agremiação (formato: 1.0 2.5 3.0 4.5 5.0): ");
    scanf("%f %f %f %f %f", &notas[0], &notas[1], &notas[2], &notas[3], &notas[4]);
    
    // Calculando a nota final do quesito
    float notaFinal = calcularNotaFinal(notas);
    
    // Imprimindo a nota final com uma casa decimal
    printf("Nota final: %.1f\n", notaFinal);
    
    return 0;
}
-----------------------------------------------------------------------------------------------------------
12 exercicio

#include <stdio.h>

int main() {
    char encodedMessage[1001];
    char decodedMessage[501]; // A mensagem decodificada terá no máximo metade do tamanho da codificada

    printf("Digite a mensagem codificada na língua do P eletrônica de Jacy e Kátia:\n");
    fgets(encodedMessage, sizeof(encodedMessage), stdin);

    int decodedIndex = 0;
    for (int i = 0; encodedMessage[i] != '\0'; i++) {
        if (encodedMessage[i] == 'p' && encodedMessage[i + 1] != '\0') {
            decodedMessage[decodedIndex] = encodedMessage[i + 1];
            i++; // Pular a próxima letra após a letra 'p'
        } else {
            decodedMessage[decodedIndex] = encodedMessage[i];
        }
        decodedIndex++;
    }
    decodedMessage[decodedIndex] = '\0'; // Adicionar o caractere nulo de fim de string

    printf("Mensagem decodificada:\n");
    printf("%s\n", decodedMessage);

    return 0;
}

-----------------------------------------------------------------------------------------------------------
FIM
